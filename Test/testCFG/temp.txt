
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/ini_parser.hpp>
#include <boost/progress.hpp>
#include <boost/foreach.hpp>


#define APPNAME _T("DataRecon")
namespace OPT {
	String strInputFileName;
	int col;
	int row;
	int tens;
	String submodel;
	int flag;
	int recontype;
	int image_ow;
	int image_oh;
	int image_w;
	int image_h;
	int image_tw;
	int image_th;
	String strOutputFileName;
	String strMeshFileName;
	unsigned nResolutionLevel;
	unsigned nMinResolution;
	float fOutlierThreshold;
	float fRatioDataSmoothness;
	bool bGlobalSeamLeveling;
	bool bLocalSeamLeveling;
	unsigned nTextureSizeMultiple;
	unsigned nRectPackingHeuristic;
	uint32_t nColEmpty;
	unsigned nOrthoMapResolution;
	unsigned nArchiveType;
	int nProcessPriority;
	unsigned nMaxThreads;
	String strExportType;
	String strConfigFileName;
	boost::program_options::variables_map vm;
	int quadtree_division_level;
	unsigned resolution;
	unsigned multi_process_num;
	float g_merge_reduce_ratio;

	bool b_seam_edge;
	int single_reduce_level;
	float g_nomerge_reduce_ratio;
	float texture_reduce_ratio;


	std::string g_image_format = ".jpg";
	float tile_size;
	float leaf_resolution;
	bool hand_work_mode;

}




void generate_configFile(boost::program_options::options_description& options_) {
	std::string strConfigName = APPNAME _T(".cfg");

	if (!boost::filesystem::exists(strConfigName)) {
		boost::filesystem::ofstream ostream(strConfigName, std::ios_base::out);
		ostream.close();

		boost::filesystem::ofstream configFile(strConfigName);
		boost::property_tree::ptree tree;
		for (auto& option : options_.options())
		{
			std::string name = option->long_name();
			boost::any defaultValue;
			option->semantic()->apply_default(defaultValue);

			if (defaultValue.type() == typeid(std::string))
			{
				std::string val = boost::any_cast<std::string>(defaultValue);
				tree.put(name, val);
			}
			else if (defaultValue.type() == typeid(int)) {
				int val = boost::any_cast<int>(defaultValue);
				tree.put(name, val);
			}
			else if (defaultValue.type() == typeid(float)) {
				float val = boost::any_cast<float>(defaultValue);
				tree.put(name, val);
			}
			else if (defaultValue.type() == typeid(double)) {
				double val = boost::any_cast<double>(defaultValue);
				tree.put(name, val);
			}
			else if (defaultValue.type() == typeid(unsigned)) {
				double val = boost::any_cast<unsigned>(defaultValue);
				tree.put(name, val);
			}
			else if (defaultValue.type() == typeid(bool)) {
				double val = boost::any_cast<bool>(defaultValue);
				tree.put(name, val);
			}

		}
		boost::property_tree::write_ini(configFile, tree);
	}
}




bool Initialize(size_t argc, LPCTSTR* argv)
{

	// group of options allowed only on command line
	boost::program_options::options_description generic("Generic options");
	generic.add_options()
		("help,h", "produce this help message")
		("working-folder,w", boost::program_options::value<std::string>(&WORKING_FOLDER), "working directory (default current directory)")
		("config-file,c", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(".cfg")), "file name containing program options")
		("export-type", boost::program_options::value<std::string>(&OPT::strExportType)->default_value(_T("obj")), "file type used to export the 3D scene (ply or obj)")
		("archive-type", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), "project archive type: 0-text, 1-binary, 2-compressed binary")
		("process-priority", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), "process priority (below normal by default)")
		("max-threads", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), "maximum number of threads (0 for using all available cores)")
#if TD_VERBOSE != TD_VERBOSE_OFF
		("verbosity,v", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(
#if TD_VERBOSE == TD_VERBOSE_DEBUG
			3
#else
			2
#endif
		), "verbosity level")
#endif
		;

	boost::program_options::options_description config("Texture options");
	config.add_options()
		("input-file,i", boost::program_options::value<std::string>(&OPT::strInputFileName)->default_value(""), "input filename containing camera poses and image list")
		("hang-col,l", boost::program_options::value<int>(&OPT::col)->default_value(2), "split mesh rows")
		("lie-row,r", boost::program_options::value<int>(&OPT::row)->default_value(2), "split mesh cols")
		("tens-size,t", boost::program_options::value<int>(&OPT::tens)->default_value(1), "split mesh height")
		("submodel,z", boost::program_options::value<std::string>(&OPT::submodel)->default_value("_submodel_"), "_submodel_")
		("flag,f", boost::program_options::value<int>(&OPT::flag)->default_value(1), "flag,0:change texture size,1:cut mesh")
		("datarecon-type,d", boost::program_options::value<int>(&OPT::recontype)->default_value(0), "flag,0:no aggregation root,1:aggregation root")
		("texture-height,eh", boost::program_options::value<int>(&OPT::image_h)->default_value(3000), "out texture image height,this medth only change UV")
		("texture-width,ew", boost::program_options::value<int>(&OPT::image_w)->default_value(4096), "out texture image width,this method only change UV")
		("texture-offest_height,th", boost::program_options::value<int>(&OPT::image_th)->default_value(0), "out texture offest image height,this medth only change UV")
		("texture-offest_width,tw", boost::program_options::value<int>(&OPT::image_tw)->default_value(0), "out texture offest image width,this method only change UV")
		("texture-org-height,oh", boost::program_options::value<int>(&OPT::image_oh)->default_value(4096), "input texture image height,this medth only change UV")
		("texture-org-width,ow", boost::program_options::value<int>(&OPT::image_ow)->default_value(4096), "input texture image width,this method only change UV")
		("output-file,o", boost::program_options::value<std::string>(&OPT::strOutputFileName)->default_value(""), "output filename for storing the mesh")
		("resolution-level", boost::program_options::value<unsigned>(&OPT::nResolutionLevel)->default_value(0), "how many times to scale down the images before mesh refinement")
		("min-resolution", boost::program_options::value<unsigned>(&OPT::nMinResolution)->default_value(640), "do not scale images lower than this resolution")
		("outlier-threshold", boost::program_options::value<float>(&OPT::fOutlierThreshold)->default_value(6e-2f), "threshold used to find and remove outlier face textures (0 - disabled)")
		("cost-smoothness-ratio", boost::program_options::value<float>(&OPT::fRatioDataSmoothness)->default_value(0.1f), "ratio used to adjust the preference for more compact patches (1 - best quality/worst compactness, ~0 - worst quality/best compactness)")
		("global-seam-leveling", boost::program_options::value<bool>(&OPT::bGlobalSeamLeveling)->default_value(true), "generate uniform texture patches using global seam leveling")
		("local-seam-leveling", boost::program_options::value<bool>(&OPT::bLocalSeamLeveling)->default_value(true), "generate uniform texture patch borders using local seam leveling")
		("texture-size-multiple", boost::program_options::value<unsigned>(&OPT::nTextureSizeMultiple)->default_value(2), "texture size should be a multiple of this value (0 - power of two)")
		("patch-packing-heuristic", boost::program_options::value<unsigned>(&OPT::nRectPackingHeuristic)->default_value(3), "specify the heuristic used when deciding where to place a new patch (0 - best fit, 3 - good speed, 100 - best speed)")
		("empty-color", boost::program_options::value<uint32_t>(&OPT::nColEmpty)->default_value(0x00FF7F27), "color used for faces not covered by any image")
		("orthographic-image-resolution", boost::program_options::value<unsigned>(&OPT::nOrthoMapResolution)->default_value(0), "orthographic image resolution to be generated from the textured mesh - the mesh is expected to be already geo-referenced or at least properly oriented (0 - disabled)")
		("quadtree_division_level,qdl", boost::program_options::value<int>(&OPT::quadtree_division_level)->default_value(-1), "quadtree division level")
		("resolution,res", boost::program_options::value<unsigned>(&OPT::resolution)->default_value(0), "resolution pixel")
		("multi_process_num,mpn", boost::program_options::value<unsigned>(&OPT::multi_process_num)->default_value(10), "multi process num")
		("g_merge_reduce_ratio,mrr", boost::program_options::value<float>(&OPT::g_merge_reduce_ratio)->default_value(0.25f), "merge reduce ratio")
		//<add tag=1725 date=2021-03-30>
		("g_nomerge_reduce_ratio,nmrr", boost::program_options::value<float>(&OPT::g_nomerge_reduce_ratio)->default_value(0.83f), "no merge reduce ratio")
		("single_reduce_level,srl", boost::program_options::value<int>(&OPT::single_reduce_level)->default_value(3), "single layer reduce level")
		("b_seam_edge,se", boost::program_options::value<bool>(&OPT::b_seam_edge)->default_value(true), "enable seam edge or not ")
		//</add>
		("leaf_resolution,lr", boost::program_options::value<float>(&OPT::leaf_resolution)->default_value(0.0f), "CC leaf_resolution")
		("tile_size,ts", boost::program_options::value<float>(&OPT::tile_size)->default_value(0.0f), "CC tile_size")
		("hand_work_mode,hw", boost::program_options::value<bool>(&OPT::hand_work_mode)->default_value(false), "hand work mode,donot compute rangelist")

		("nomerge_texture_reduce_ratio,ntrr", boost::program_options::value<float>(&OPT::texture_reduce_ratio)->default_value(0.25f), " no merge texture reduce ratio ")

		;


	boost::program_options::options_description hidden("Hidden options");
	hidden.add_options()
		("mesh-file", boost::program_options::value<std::string>(&OPT::strMeshFileName)->default_value(_T("")), "mesh file name to texture (overwrite the existing mesh)")
		;

	boost::program_options::options_description cmdline_options;
	cmdline_options.add(generic).add(config).add(hidden);

	boost::program_options::options_description config_file_options;
	config_file_options.add(config).add(hidden);

	try {
		if (argc > 1) {
			boost::program_options::store(boost::program_options::command_line_parser((int)argc, argv).options(cmdline_options).positional(p).run(), OPT::vm);
			boost::program_options::notify(OPT::vm);
		}
		else {
			generate_configFile(config_file_options);
			INIT_WORKING_FOLDER;
			std::ifstream ifs(MAKE_PATH_SAFE(APPNAME _T(".cfg")));
			if (ifs) {
				boost::program_options::store(parse_config_file(ifs, config_file_options), OPT::vm);
				boost::program_options::notify(OPT::vm);
			}
		}

	}
	catch (const std::exception& e) {
		LOG(e.what());
		return false;
	}
	
	
}
	
	
	